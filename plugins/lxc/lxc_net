#!/bin/sh

: << =cut

=head1 NAME

lxc_net - Munin plugin to graph traffic of active LXC containers.

=head1 APPLICABLE SYSTEMS

LXC container with "lxc.network.type=veth" and "lxc.network.veth.pair" settings.

=head1 CONFIGURATION

env.lxcpath - Set the path where LXC containers are stored, default: /var/lib/lxc
env.exclude - Removing containers from graphs, default: empty

  [lxc_net]
    env.lxcpath /var/lib/lxc
    env.exclude container1 container2

=head1 INTERPRETATION

This plugin reads a "lxc.network.veth.pair" setting from "config" file of each container,
because lxc-start command creates a random named veth device without the setting.

If your xen config (/var/lib/lxc/GUEST_NAME/config does not contain this parameter, 
then you have to fill it, becouse if every guest restart generate new device name, then the graph will be useless
( example config : lxc.network.veth.pair = vethsamba )

=head1 AUTHOR

mitty   mitty@mitty.jp
alpha_one_x86   alpha_one_x86@firt-world.info

=head1 LICENSE

2-clause BSD License

=head1 MAGIC MARKERS

 #%# familiy=auto
 #%# capabilities=autoconf

=cut

. /usr/libexec/munin/plugins/plugin.sh

#don't use lxc-ls + ls-info + RUNNING: huge performance improvements 8s -> 0.01s
for guest in `find /sys/fs/cgroup/cpuacct/lxc/ -maxdepth 1 -mindepth 1 -type d -printf '%f\n' | sort -u`; do
    guest_names="$guest_names $guest"
done

lxcpath=${lxcpath:-/var/lib/lxc}

if [ "$1" = "autoconf" ]; then
    if [ ! -r /proc/net/dev ]; then
        echo "no (/proc/net/dev cannot be read)"
        exit 0
    fi
    if [ ! -e "$lxcpath" ]; then
        echo "no ($lxcdir is not present)"
        exit 0
    fi
    
    echo yes
fi

actives=""

if [ "$1" = "config" ]; then
    echo "graph_title Network traffic"
    echo "graph_args --base 1000"
    echo "graph_vlabel bits in (-) / out (+) per ${graph_period}"
    echo "graph_category lxc"
    echo "graph_info This graph shows the traffic of active LXC containers."
    
for guest in $guest_names; do
    guestclean=$(clean_fieldname $guest)
        bps="1000000000"
        
        if [ `lxc-info -H -S -n ${guest} 2> /dev/null | grep -F 'RX bytes' | wc -l` -ne 0 ]
        then
        echo "${guestclean}_down.label ${guest}"
        echo "${guestclean}_down.type DERIVE"
        echo "${guestclean}_down.graph no"
        echo "${guestclean}_down.cdef ${guestclean}_down,8,*"
        echo "${guestclean}_down.min 0"
        echo "${guestclean}_down.max ${bps}"
        echo "${guestclean}_up.label ${guest}"
        echo "${guestclean}_up.type DERIVE"
        echo "${guestclean}_up.negative ${guestclean}_down"
        echo "${guestclean}_up.cdef ${guestclean}_up,8,*"
        echo "${guestclean}_up.min 0"
        echo "${guestclean}_up.max ${bps}"
        fi
   done
   exit 0
fi


for guest in $guest_names; do
    guestclean=$(clean_fieldname $guest)
        if [ `lxc-info -H -S -n ${guest} 2> /dev/null | grep -F 'RX bytes' | wc -l` -ne 0 ]
        then
    echo -n "${guestclean}_down.value "
    lxc-info -H -S -n ${guest} | grep -F 'RX bytes' | grep -oE "[[:digit:]]{1,}"
    echo -n "${guestclean}_up.value "
    lxc-info -H -S -n ${guest} | grep -F 'TX bytes' | grep -oE "[[:digit:]]{1,}"
        fi
done